
package Games;

public class Sudoku {

	public static void main(String[] args) {
		Sudoku obj = new Sudoku();
		int[][] board = new int[][] { { 3, 0, 6, 5, 0, 8, 4, 0, 0 }, { 5, 2, 0, 0, 0, 0, 0, 0, 0 },
				{ 0, 8, 7, 0, 0, 0, 0, 3, 1 }, { 0, 0, 3, 0, 1, 0, 0, 8, 0 }, { 9, 0, 0, 8, 6, 3, 0, 0, 5 },
				{ 0, 5, 0, 0, 9, 0, 6, 0, 0 }, { 1, 3, 0, 0, 0, 0, 2, 5, 0 }, { 0, 0, 0, 0, 0, 0, 0, 7, 4 },
				{ 0, 0, 5, 2, 0, 6, 3, 0, 0 }, };

		if (obj.solveSudoku(board)) {
			obj.display(board);
		} else {
			System.out.println("Sudoku can't solve..!");
		}
	}

	private boolean solveSudoku(int[][] board) {
		int row = -1;
		int col = -1;
		int n = board.length;
		boolean emptyLeft = true;

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (board[i][j] == 0) {
					row = i;
					col = j;
					emptyLeft = false;
					break;
				}
			}
			if (emptyLeft == false) {
				break;
			}
		}

		if (emptyLeft == true) {
			return true;
		}
		// back track

		for (int number = 1; number <= 9; number++) {
			if (isSafe(board, row, col, number)) {
				board[row][col] = number;
				if (solveSudoku(board)) {
					return true;
				} else {
					board[row][col] = 0;
				}
			}

		}

		return false;

	}

	private boolean isSafe(int[][] board, int row, int col, int number) {
		// check col
		for (int i = 0; i < board.length; i++) {
			if (board[row][i] == number) {
				return false;
			}
		}
		// check rows
		for (int i = 0; i < board.length; i++) {
			if (board[i][col] == number) {
				return false;
			}
		}
		int sqrt = (int) Math.sqrt(board.length);
		int rowStart = row - row % sqrt;
		int colStart = col - col % sqrt;

		for (int r = rowStart; r < rowStart + sqrt; r++) {
			for (int c = colStart; c < colStart + sqrt; c++) {
				if (board[r][c] == number) {
					return false;
				}
			}
		}
		return true;

	}

	private void display(int[][] board) {
		for (int[] row : board) {
			for (int element : row) {
				System.out.print(element + " ");
			}
			System.out.println();
		}

	}
}
