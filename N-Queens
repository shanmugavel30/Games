
package Games;

import java.util.Scanner;

public class N_Queens {

	int r = 0;

	public static void main(String[] args) {
		N_Queens obj = new N_Queens();
		Scanner scan = new Scanner(System.in);
		System.out.println("Enter the number of queens: ");
		int n = scan.nextInt();
		boolean[][] board = new boolean[n][n];
		System.out.println(obj.placeQueens(board, 0));
		System.out.println("Count : " + obj.r);
	}

	private int placeQueens(boolean board[][], int row) {

		if (row == board.length) {
			display(board);
			System.out.println();
			return 1;
		}
		int count = 0;

		for (int col = 0; col < board.length; col++) {
			if (isSafe(board, row, col)) {
				board[row][col] = true;
				r++;
				count += placeQueens(board, row + 1);
				board[row][col] = false;
			}
		}
		return count;
	}

	private boolean isSafe(boolean[][] board, int row, int col) {
		// vertical row
		for (int i = 0; i < row; i++) {
			if (board[i][col]) {
				return false;
			}
		}
		// diagonal left
		int maxLeft = Math.min(row, col);
		for (int i = 1; i <= maxLeft; i++) {
			if (board[row - i][col - i]) {
				return false;
			}

		}
		// diagonal right
		int maxRight = Math.min(row, board.length - col - 1);
		for (int i = 1; i <= maxRight; i++) {
			if (board[row - i][col + i]) {
				return false;
			}

		}
		return true;
	}

	private void display(boolean[][] board) {
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[i].length; j++) {
				if (board[i][j] == true) {
					System.out.print("Q ");
				} else {
					System.out.print("X ");
				}
			}
			System.out.println();
		}
	}

}
